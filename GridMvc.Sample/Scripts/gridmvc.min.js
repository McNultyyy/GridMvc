/***
* Grid.Mvc
* Examples and documentation at: http://gridmvc.codeplex.com
* Version: 3.0.0
* Requires: window.jQuery v1.3+
* LGPL license: http://gridmvc.codeplex.com/license
*/
window.pageGrids = window.pageGrids || {}; $.fn.extend({ gridmvc: function () { var aObj = []; $(this).each(function () { if (!$(this).data("gridmvc")) { var options = { lang: $(this).attr("data-lang"), selectable: $(this).attr("data-selectable") == "true", multiplefilters: $(this).attr("data-multiplefilters") == "true" }; var grid = new GridMvc(this, options); var name = $(this).attr("data-gridname"); if (name.length > 0) window.pageGrids[$(this).attr("data-gridname")] = grid; aObj.push(grid); $(this).data("gridmvc", grid) } else { aObj.push($(this).data("gridmvc")) } }); if (aObj.length == 1) return aObj[0]; return aObj } }); GridMvc = (function ($) { function gridMvc(container, options) { this.jqContainer = $(container); options = options || {}; this.options = $.extend({}, this.defaults(), options); this.init() } gridMvc.prototype.init = function () { this.lang = GridMvc.lang[this.options.lang]; if (typeof (this.lang) == 'undefined') this.lang = GridMvc.lang.en; this.events = []; if (this.options.selectable) this.initGridRowsEvents(); this.filterWidgets = []; this.addFilterWidget(new TextFilterWidget()); this.addFilterWidget(new NumberFilterWidget()); this.addFilterWidget(new DateTimeFilterWidget()); this.addFilterWidget(new BooleanFilterWidget()); this.openedMenuBtn = null; this.initFilters() }; gridMvc.prototype.initGridRowsEvents = function () { var $this = this; this.jqContainer.on("click", ".grid-row", function () { $this.rowClicked.call(this, $this) }) }; gridMvc.prototype.rowClicked = function ($context) { if (!$context.options.selectable) return; var row = $(this).closest(".grid-row"); if (row.length <= 0) return; var gridRow = {}; row.find(".grid-cell").each(function () { var columnName = $(this).attr("data-name"); if (columnName.length > 0) gridRow[columnName] = $(this).text() }); var evt = $.Event("RowClicked"); $context.notifyOnRowSelect(gridRow, evt); if (!evt.isDefaultPrevented()) $context.markRowSelected(row) }; gridMvc.prototype.markRowSelected = function (row) { this.jqContainer.find(".grid-row.grid-row-selected").removeClass("grid-row-selected"); row.addClass("grid-row-selected") }; gridMvc.prototype.defaults = function () { return { selectable: true, multiplefilters: false, lang: 'en' } }; gridMvc.prototype.onRowSelect = function (func) { this.events.push({ name: "onRowSelect", callback: func }) }; gridMvc.prototype.notifyOnRowSelect = function (row, e) { e.row = row; this.notifyEvent("onRowSelect", e) }; gridMvc.prototype.notifyEvent = function (eventName, e) { for (var i = 0; i < this.events.length; i++) { if (this.events[i].name == eventName) if (!this.events[i].callback(e)) break } }; gridMvc.prototype.initFilters = function () { var filterHtml = this.filterMenuHtml(); var self = this; this.jqContainer.find(".grid-filter").each(function () { $(this).click(function () { return self.openFilterPopup.call(this, self, filterHtml) }) }) }; gridMvc.prototype.openFilterPopup = function (self, html) { var columnType = $(this).attr("data-type") || ""; var widget = self.getFilterWidgetForType(columnType); if (widget == null) return false; if (this.hasAttribute("data-rendered")) { var or = self.openMenuOnClick.call(this, self); if (!or && typeof (widget.onShow) != 'undefined') widget.onShow(); return or } var columnName = $(this).attr("data-name") || ""; var filterData = $(this).attr("data-filterdata") || ""; var filterDataObj = self.parseFilterValues(filterData); var filterUrl = $(this).attr("data-url"); $(this).attr("data-rendered", "1"); $(this).append(html); var widgetContainer = $(this).find(".grid-popup-widget"); if (typeof (widget.onRender) != 'undefined') widget.onRender(widgetContainer, self.lang, columnType, filterDataObj, function (values) { self.closeOpenedPopups(); self.applyFilterValues(filterUrl, columnName, values, false) }); if ($(this).find(".grid-filter-btn").hasClass("filtered") && widget.showClearFilterButton()) { var inner = $(this).find(".grid-popup-additional"); inner.append(self.getClearFilterButton(filterUrl)); inner.find(".grid-filter-clear").click(function () { self.applyFilterValues(filterUrl, columnName, "", true) }) } var openResult = self.openMenuOnClick.call(this, self); if (typeof (widget.onShow) != 'undefined') widget.onShow(); return openResult }; gridMvc.prototype.filterMenuHtml = function () { return '<div class="dropdown-menu grid-dropdown" style="display: none;">                    <div class="grid-dropdown-arrow"></div>                    <div class="grid-dropdown-inner">                            <div class="grid-popup-widget"></div>                            <div class="grid-popup-additional"></div>                    </div>                </div>' }; gridMvc.prototype.getClearFilterButton = function () { return '<ul class="menu-list">                    <li><a class="grid-filter-clear" href="javascript:void(0);">' + this.lang.clearFilterLabel + '</a></li>                </ul>' }; gridMvc.prototype.addFilterWidget = function (widget) { this.filterWidgets.push(widget) }; gridMvc.prototype.parseFilterValues = function (filterData) { var opt = $.parseJSON(filterData); for (var i = 0; i < opt.length; i++) { opt[i].filterValue = this.urldecode(opt[i].filterValue) } return opt }; gridMvc.prototype.urldecode = function (str) { return decodeURIComponent((str + '').replace(/\+/g, '%20')) }; gridMvc.prototype.getFilterWidgetForType = function (typeName) { for (var i = 0; i < this.filterWidgets.length; i++) { if ($.inArray(typeName, this.filterWidgets[i].getAssociatedTypes()) >= 0) return this.filterWidgets[i] } return null }; gridMvc.prototype.replaceFilterWidget = function (typeNameToReplace, widget) { for (var i = 0; i < this.filterWidgets.length; i++) { if ($.inArray(typeNameToReplace, this.filterWidgets[i].getAssociatedTypes()) >= 0) { this.filterWidgets.splice(i, 1); this.addFilterWidget(widget); return true } } return false }; gridMvc.prototype.applyFilterValues = function (initialUrl, columnName, values, skip) { var filters = this.jqContainer.find(".grid-filter"); if (initialUrl.length > 0) initialUrl += "&"; var url = ""; if (!skip) { url += this.getFilterQueryData(columnName, values) } if (this.options.multiplefilters) { for (var i = 0; i < filters.length; i++) { if ($(filters[i]).attr("data-name") != columnName) { var filterData = this.parseFilterValues($(filters[i]).attr("data-filterdata")); if (filterData.length == 0) continue; if (url.length > 0) url += "&"; url += this.getFilterQueryData($(filters[i]).attr("data-name"), filterData) } else { continue } } } window.location.search = initialUrl + url }; gridMvc.prototype.getFilterQueryData = function (columnName, values) { var url = ""; for (var i = 0; i < values.length; i++) { url += "grid-filter=" + encodeURIComponent(columnName) + "__" + values[i].filterType + "__" + encodeURIComponent(values[i].filterValue); if (i != values.length - 1) url += "&" } return url }; gridMvc.prototype.openMenuOnClick = function (self) { if ($(this).hasClass("clicked")) return true; self.closeOpenedPopups(); $(this).addClass("clicked"); var popup = $(this).find(".dropdown-menu"); if (popup.length == 0) return true; popup.show(); popup.addClass("opened"); self.openedMenuBtn = $(this); $(document).bind("click.gridmvc", function (e) { self.documentCallback(e, self) }); return false }; gridMvc.prototype.documentCallback = function (e, $context) { e = e || event; var target = e.target || e.srcElement; var box = $(".dropdown-menu.opened").get(0); if (typeof box != "undefined") { do { if (box == target) { return } target = target.parentNode } while (target); box.style.display = "none"; $(box).removeClass("opened") } if ($context.openedMenuBtn != null) $context.openedMenuBtn.removeClass("clicked"); $(document).unbind("click.gridmvc") }; gridMvc.prototype.closeOpenedPopups = function () { var openedPopup = $(".dropdown-menu.opened"); openedPopup.hide(); openedPopup.removeClass("opened"); if (this.openedMenuBtn != null) this.openedMenuBtn.removeClass("clicked") }; gridMvc.prototype.selectable = function (enable) { this.options.selectable = enable }; return gridMvc })(window.jQuery); if (typeof (GridMvc.lang) == 'undefined') GridMvc.lang = {}; GridMvc.lang.en = { filterTypeLabel: "Type: ", filterValueLabel: "Value:", applyFilterButtonText: "Apply", filterSelectTypes: { Equals: "Equals", StartsWith: "StartsWith", Contains: "Contains", EndsWith: "EndsWith", GreaterThan: "Greater than", LessThan: "Less than" }, code: 'en', boolTrueLabel: "Yes", boolFalseLabel: "No", clearFilterLabel: "Clear filter" }; TextFilterWidget = (function ($) { function textFilterWidget() { } textFilterWidget.prototype.getAssociatedTypes = function () { return ["System.String"] }; textFilterWidget.prototype.onShow = function () { var textBox = this.container.find(".grid-filter-input"); if (textBox.length <= 0) return; textBox.focus() }; textFilterWidget.prototype.showClearFilterButton = function () { return true }; textFilterWidget.prototype.onRender = function (container, lang, typeName, values, cb) { this.cb = cb; this.container = container; this.lang = lang; this.value = values.length > 0 ? values[0] : { filterType: 1, filterValue: "" }; this.renderWidget(); this.registerEvents() }; textFilterWidget.prototype.renderWidget = function () { var html = '<label>' + this.lang.filterTypeLabel + '</label>                    <select class="grid-filter-type">                        <option value="1" ' + (this.value.filterType == "1" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.Equals + '</option>                        <option value="2" ' + (this.value.filterType == "2" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.Contains + '</option>                        <option value="3" ' + (this.value.filterType == "3" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.StartsWith + '</option>                        <option value="4" ' + (this.value.filterType == "4" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.EndsWith + '</option>                    </select>                    <label>' + this.lang.filterValueLabel + '</label>                    <input type="text" class="grid-filter-input" value="' + this.value.filterValue + '" />                    <div class="grid-filter-buttons">                        <input type="button" class="btn btn-apply" value="' + this.lang.applyFilterButtonText + '" />                    </div>'; this.container.append(html) }; textFilterWidget.prototype.registerEvents = function () { var applyBtn = this.container.find(".btn-apply"); var $context = this; applyBtn.click(function () { var type = $context.container.find(".grid-filter-type").val(); var value = $context.container.find(".grid-filter-input").val(); var filterValues = [{ filterType: type, filterValue: value }]; $context.cb(filterValues) }); this.container.find(".grid-filter-input").keyup(function (event) { if (event.keyCode == 13) { applyBtn.click() } if (event.keyCode == 27) { GridMvc.closeOpenedPopups() } }) }; return textFilterWidget })(window.jQuery); NumberFilterWidget = (function ($) { function numberFilterWidget() { } numberFilterWidget.prototype.showClearFilterButton = function () { return true }; numberFilterWidget.prototype.getAssociatedTypes = function () { return ["System.Int32", "System.Double", "System.Decimal", "System.Byte", "System.Single", "System.Float", "System.Int64"] }; numberFilterWidget.prototype.onShow = function () { var textBox = this.container.find(".grid-filter-input"); if (textBox.length <= 0) return; textBox.focus() }; numberFilterWidget.prototype.onRender = function (container, lang, typeName, values, cb) { this.cb = cb; this.container = container; this.lang = lang; this.typeName = typeName; this.value = values.length > 0 ? values[0] : { filterType: 1, filterValue: "" }; this.renderWidget(); this.registerEvents() }; numberFilterWidget.prototype.renderWidget = function () { var html = '<label>' + this.lang.filterTypeLabel + '</label>                    <select class="grid-filter-type">                        <option value="1" ' + (this.value.filterType == "1" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.Equals + '</option>                        <option value="5" ' + (this.value.filterType == "5" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.GreaterThan + '</option>                        <option value="6" ' + (this.value.filterType == "6" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.LessThan + '</option>                    </select>                    <label>' + this.lang.filterValueLabel + '</label>                    <input type="text" class="grid-filter-input" value="' + this.value.filterValue + '" />                    <div class="grid-filter-buttons">                        <input type="button" class="btn btn-apply" value="' + this.lang.applyFilterButtonText + '" />                    </div>'; this.container.append(html) }; numberFilterWidget.prototype.registerEvents = function () { var $context = this; var applyBtn = this.container.find(".btn-apply"); applyBtn.click(function () { var type = $context.container.find(".grid-filter-type").val(); var value = $context.container.find(".grid-filter-input").val(); var filters = [{ filterType: type, filterValue: value }]; $context.cb(filters) }); var txt = this.container.find(".grid-filter-input"); txt.keyup(function (event) { if (event.keyCode == 13) { applyBtn.click() } if (event.keyCode == 27) { GridMvc.closeOpenedPopups() } }).keypress(function (event) { return $context.validateInput.call($context, event) }); if (this.typeName == "System.Byte") txt.attr("maxlength", "3") }; numberFilterWidget.prototype.validateInput = function (evt) { var $event = evt || window.event; var key = $event.keyCode || $event.which; key = String.fromCharCode(key); var regex; switch (this.typeName) { case "System.Byte": case "System.Int32": case "System.Int64": regex = /[0-9]/; break; default: regex = /[0-9]|\.|\,/ } if (!regex.test(key)) { $event.returnValue = false; if ($event.preventDefault) $event.preventDefault() } }; return numberFilterWidget })(window.jQuery); DateTimeFilterWidget = (function ($) { function dateTimeFilterWidget() { } dateTimeFilterWidget.prototype.getAssociatedTypes = function () { return ["System.DateTime"] }; dateTimeFilterWidget.prototype.showClearFilterButton = function () { return true }; dateTimeFilterWidget.prototype.onRender = function (container, lang, typeName, values, cb) { this.jqUiIncluded = typeof ($.datepicker) != 'undefined'; this.cb = cb; this.container = container; this.lang = lang; this.value = values.length > 0 ? values[0] : { filterType: 1, filterValue: "" }; this.renderWidget(); this.registerEvents() }; dateTimeFilterWidget.prototype.renderWidget = function () { var html = '<label>' + this.lang.filterTypeLabel + '</label>                    <select class="grid-filter-type">                        <option value="1" ' + (this.value.filterType == "1" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.Equals + '</option>                        <option value="5" ' + (this.value.filterType == "5" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.GreaterThan + '</option>                        <option value="6" ' + (this.value.filterType == "6" ? "selected=\"selected\"" : "") + '>' + this.lang.filterSelectTypes.LessThan + '</option>                    </select>' + (this.jqUiIncluded ? '<div class="grid-filter-datepicker"></div>' : '<label>' + this.lang.filterValueLabel + '</label>                             <input type="text" class="grid-filter-input" value="' + this.value.filterValue + '" />                             <div class="grid-filter-buttons">                                <input type="button" class="btn btn-apply" value="' + this.lang.applyFilterButtonText + '" />                             </div>'); this.container.append(html); if (this.jqUiIncluded) { var $context = this; var dateContainer = this.container.find(".grid-filter-datepicker"); dateContainer.datepicker({ onSelect: function (dateText) { var type = $context.container.find(".grid-filter-type").val(); var filterValues = [{ filterType: type, filterValue: dateText }]; $context.cb(filterValues) }, defaultDate: this.filterValue, changeMonth: true, changeYear: true }); if (typeof ($.datepicker.regional[this.lang.code]) != 'undefined') { dateContainer.datepicker("option", $.datepicker.regional[this.lang.code]) } } }; dateTimeFilterWidget.prototype.registerEvents = function () { var $context = this; var applyBtn = this.container.find(".btn-apply"); applyBtn.click(function () { var type = $context.container.find(".grid-filter-type").val(); var value = $context.container.find(".grid-filter-input").val(); var filterValues = [{ filterType: type, filterValue: value }]; $context.cb(filterValues) }); this.container.find(".grid-filter-input").keyup(function (event) { if (event.keyCode == 13) { applyBtn.click() } }) }; return dateTimeFilterWidget })(window.jQuery); BooleanFilterWidget = (function ($) { function booleanFilterWidget() { } booleanFilterWidget.prototype.getAssociatedTypes = function () { return ["System.Boolean"] }; booleanFilterWidget.prototype.showClearFilterButton = function () { return true }; booleanFilterWidget.prototype.onRender = function (container, lang, typeName, values, cb) { this.cb = cb; this.container = container; this.lang = lang; this.value = values.length > 0 ? values[0] : { filterType: 1, filterValue: "" }; this.renderWidget(); this.registerEvents() }; booleanFilterWidget.prototype.renderWidget = function () { var html = '<label>' + this.lang.filterValueLabel + '</label>                    <ul class="menu-list">                        <li><a class="grid-filter-choose ' + (this.value.filterValue == "true" ? "choose-selected" : "") + '" data-value="true" href="javascript:void(0);">' + this.lang.boolTrueLabel + '</a></li>                        <li><a class="grid-filter-choose ' + (this.value.filterValue == "false" ? "choose-selected" : "") + '" data-value="false" href="javascript:void(0);">' + this.lang.boolFalseLabel + '</a></li>                    </ul>'; this.container.append(html) }; booleanFilterWidget.prototype.registerEvents = function () { var $context = this; var applyBtn = this.container.find(".grid-filter-choose"); applyBtn.click(function () { var filterValues = [{ filterType: "1", filterValue: $(this).attr("data-value") }]; $context.cb(filterValues) }) }; return booleanFilterWidget })(window.jQuery); (function ($) { if (!$) return; $(function () { $(".grid-mvc").each(function () { $(".grid-mvc").gridmvc() }) }) })(window.jQuery);