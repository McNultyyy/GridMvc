@using GridMvc.Columns
@model GridMvc.IGrid
@if (Model == null)
{
    return;
}
@if (Model.ItemsCount == 0)
{
    <p class="grid-empty-text">
        @Model.EmptyGridText
    </p>
    return;
}
<div class="grid-outer @(Model.EnablePaging ? "paged" : string.Empty)">
    @* Draw grid top items infomation panel *@
    @if (Model.EnablePaging)
    {
        <div class="grid-wrap-header">
            Results: @(((Model.Pager.CurrentPage - 1)*Model.Pager.PageSize) + 1)
            - @(((Model.Pager.CurrentPage - 1)*Model.Pager.PageSize) + Model.DisplayingItemsCount)
            (@Model.ItemsCount)
        </div>
    }
    <div class="grid-wrap">
        <table class="grid-table">
            @* Draw grid header *@
            <tr>
                @foreach (IGridColumn column in Model.Columns)
                {
                    @Html.Raw(column.HeaderRenderer.Render(column, column.Title))
                }
            </tr>
            @* Draw grid body *@
            @foreach (object item in Model.ItemsToDisplay)
            {
                <tr class="grid-row">
                    @foreach (IGridColumn column in Model.Columns)
                    {
                        @Html.Raw(column.CellRenderer.Render(column, column.GetCell(item).Value))
                    }
                </tr>
            }
        </table>
        @* Draw pager *@
        @if (Model.EnablePaging && Model.Pager != null && Model.Pager.PageCount > 1)
        {
            @Html.Partial("_GridPager", Model.Pager)
        }
    </div>
</div>